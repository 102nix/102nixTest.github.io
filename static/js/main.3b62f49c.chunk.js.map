{"version":3,"sources":["api/api.js","redux/photoReducer.js","components/Photos/Photos.js","components/Modal/ModalWin.js","components/Loader/Loader.js","components/Photos/PhotosContainer.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["URL","api","axios","get","id","initialState","photos","comments","urlModal","setModal","val","type","photoReducer","state","action","url","text","Photos","props","src","onClick","showModal","alt","connect","useState","textareaValue","setTextareaValue","show","onHide","Header","closeButton","Body","className","map","com","onChange","event","target","value","placeholder","textComments","addComment","Loader","onAPIPhotos","dispatch","a","response","data","onModalPhoto","length","el","key","App","exact","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","reduxThunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b62f49c.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL = \"https://boiling-refuge-66454.herokuapp.com/images/\";\n\nexport const api = {\n  getAPIPhotos () {\n    return axios.get(URL)\n  },\n  getAPIModal (id) {\n    return axios.get(URL + id)\n  }\n}","import { api } from '../api/api';\n\nconst SET_PHOTOS = 'SET_PHOTOS'\nconst SET_MODAL = 'SET_MODAL'\nconst ADD_COMMENT = 'ADD_COMMENT'\n\nlet initialState = {\n  photos: null,\n  comments: [],\n  urlModal: null\n}\n\nconst photoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_PHOTOS:\n      return {\n        ...state,\n        photos: action.val\n      }\n      case SET_MODAL:\n        return {\n          ...state,\n          comments: action.val.comments,\n          urlModal: action.val.url\n        }\n        case ADD_COMMENT:\n        return {\n          ...state,\n          comments: action.text,\n        }\n    default: return state\n  }\n}\n\nexport const setPhotos = (val) => ({type: SET_PHOTOS, val})\nexport const setModal = (val) => ({type: SET_MODAL, val})\nexport const addComment = (text) => ({type: ADD_COMMENT, text})\n\nexport const onAPIPhotos = () => async (dispatch) => {\n  let response = await api.getAPIPhotos()\n  dispatch(setPhotos(response.data))\n}\n\nexport const onModalPhoto = (id) => async (dispatch) => {\n  let response = await api.getAPIModal(id)\n  let comments = []\n  if (response.data.comments.length > 0) {\n    comments = [response.data.comments[0].text]\n  }\n  dispatch(setModal({\n    comments,\n    url: response.data.url\n  }))\n}\n\nexport default photoReducer","import React from 'react';\nimport './Photos.scss';\n\nconst Photos = props => {\n  return <img src={props.url} onClick={() => props.showModal(props.id)} alt={props.id}/>\n}\n\nexport default Photos","import React, { useState } from 'react';\nimport './Modal.scss';\nimport Modal from 'react-bootstrap/Modal';\nimport { setModal } from '../../redux/photoReducer';\nimport { connect } from 'react-redux';\n\nconst ModalWin = props => {\n\n  const handleClose = () => {\n    props.setModal({\n      comments: [],\n      url: null\n    })\n  }\n\n  const [textareaValue, setTextareaValue] = useState('')\n  \n  const saveComment = () => {\n    const textComments = [...props.comments, textareaValue]\n    props.addComment(textComments)\n    setTextareaValue('')\n  }\n\n  return (\n    <Modal show={props.urlModal} onHide={handleClose}>\n      <Modal.Header closeButton></Modal.Header>\n      <Modal.Body>\n        <img src={props.urlModal} alt=\"\" className=\"img-fluid\" />\n        <div className=\"card\">\n          <div className=\"card-header\">\n            Комментарии:\n          </div>\n          <div className=\"card-body\">\n            {\n              props.comments.map(com => {\n                return<div className=\"comment\">{com}</div>\n              })\n            }\n          </div>\n          <textarea \n            className=\"card-footer\" \n            onChange={event => setTextareaValue(event.target.value)}\n            value={textareaValue}\n            placeholder=\"Текст комментария...\"\n            ></textarea>\n          <button className=\"btn btn-success\" onClick={saveComment}>Добавить</button>\n      </div>\n      </Modal.Body>\n    </Modal>\n  )\n}\nlet mapStateToProps = state => {\n  return {\n    urlModal: state.photoReducer.urlModal\n  }\n}\nexport default connect(mapStateToProps, { setModal })(ModalWin)","import React from 'react'\nimport './Loader.scss'\n\nconst Loader = props => {\n  return (\n    <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n  )\n}\n\nexport default Loader","import React from 'react';\nimport { onAPIPhotos, onModalPhoto, addComment } from '../../redux/photoReducer';\nimport { connect } from 'react-redux';\nimport Photos from './Photos';\nimport ModalWin from '../Modal/ModalWin';\nimport Loader from '../Loader/Loader';\n\nconst PhotosContainer = props => {\n  \n  if (props.photos === null) props.onAPIPhotos()\n\n  const showModal = (id) => {\n    props.onModalPhoto(id)\n  }\n\n  return (\n    <div className=\"container\">\n      { props.photos === null &&\n        <Loader/>\n      }\n      <div className=\"photos__row\">\n        { props.photos != null &&\n            props.photos.map(el => {\n              return <Photos\n                key={el.id}\n                url={el.url}\n                id={el.id}\n                showModal={showModal}\n              />\n            })\n        }\n        <ModalWin\n          urlModal={props.urlModal}\n          comments={props.comments}\n          addComment={props.addComment}\n        />\n      </div>\n    </div>\n  )\n}\nlet mapStateToProps = state => {\n  return {\n    photos: state.photoReducer.photos,\n    comments: state.photoReducer.comments,\n  }\n}\nexport default connect(mapStateToProps, { onAPIPhotos, onModalPhoto, addComment })(PhotosContainer)\n","import React from 'react';\nimport './App.scss';\nimport PhotosContainer from './components/Photos/PhotosContainer';\nimport { Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"content\">\n        <Route exact path=\"/\" render={() => <PhotosContainer /> } />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport photoReducer from './photoReducer';\n\nlet reducers = combineReducers({\n  photoReducer\n})\n\nconst store = createStore(reducers, applyMiddleware(reduxThunk))\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}